# -*- coding: utf-8 -*-
"""Spatial Domain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17rePkQ_V-vUYVcyaj80Z4B2trI1Gt8AJ

HISTOGRAM
"""

import matplotlib.pyplot as plt
from skimage import io, color, exposure

# Load an image
image_path = '/content/drive/MyDrive/Images/heq.jpg'
image = io.imread(image_path)
print(image.shape)

# Convert the image to grayscale if it's in color
if len(image.shape) == 3:
    image = color.rgb2gray(image)
image=image*255

# Compute the histogram
hist, bins_center = exposure.histogram(image,nbins=256)

# Plot the histogram
plt.figure(figsize=(10, 5))
plt.bar(bins_center, hist, width=0.1)
plt.title('Image Histogram')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')
plt.show()
plt.imshow(image, cmap="gray")

image_path = '/content/drive/MyDrive/Images/18.bmp' # Add '/content/' to the path
image = io.imread(image_path)
print(image.shape)

image[:,:,0]

plt.imshow(image)

image = color.rgb2gray(image)

plt.imshow(image)

import numpy as np

np.max(image)

"""HISTOGRAM EQUALIZATION"""

image_eq=exposure.equalize_hist(image)

hist2,bins_center=exposure.histogram(image_eq,nbins=256)
plt.figure(figsize=(8,5))
plt.bar(bins_center*255, hist2,width=1)
plt.show()
plt.imshow(image_eq, cmap="gray")

"""Image Negative"""

image.shape
plt.imshow(255-image, cmap="gray")

img_fft=io.imread("/content/drive/MyDrive/Images/fft.tif")

# Gamma
gamma_corrected = exposure.adjust_gamma(img_fft, 2)

# Logarithmic
logarithmic_corrected = exposure.adjust_log(img_fft, 1)

plt.imshow(img_fft, cmap="gray")
plt.show()
plt.imshow(logarithmic_corrected, cmap="gray")
plt.show()

from skimage import data

img_moon=data.moon()

plt.imshow(img_moon, cmap="gray")
plt.show()
plt.imshow(exposure.adjust_gamma(img_moon,0.4), cmap="gray")



img_spine=io.imread("/content/drive/MyDrive/Images/spine.tif")
plt.imshow(img_spine, cmap="gray")
plt.show()
plt.imshow(exposure.adjust_gamma(img_spine,0.4), cmap="gray")

img_aerial=io.imread("/content/drive/MyDrive/Images/aerial.tif")
plt.imshow(img_aerial, cmap="gray")
plt.show()
plt.imshow(exposure.adjust_gamma(img_aerial,4), cmap="gray")

"""SPATIAL DOMAIN FITERING"""

from skimage import filters

img_wall=io.imread("/content/drive/MyDrive/Images/wall.jpg")
img_wall=color.rgb2gray(img_wall)
img_edge=filters.sobel_v(img_wall)
plt.imshow(img_edge, cmap="gray")

img_edge=filters.sobel_h(img_wall)
plt.imshow(img_edge, cmap="gray")

rescaled_image = exposure.rescale_intensity(img_edge, out_range=(0, 255))
plt.imshow(rescaled_image, cmap="gray")

np.min(rescaled_image)

img_edge=filters.sobel(img_wall)
plt.imshow(img_edge, cmap="gray")

img_edge=filters.sobel(img_spine)
plt.imshow(img_edge, cmap="gray")

img_edge=filters.roberts(img_spine)
plt.imshow(img_edge, cmap="gray")

img_edge=filters.sobel_h(img_spine)
plt.imshow(img_edge, cmap="gray")

img_edge=filters.sobel_v(img_spine)
plt.imshow(img_edge, cmap="gray")

"""Filtering with a kernel"""

kernel=np.ones((3,3),dtype=float)*1/9
kernel

# from scipy.signal import sepfir2d
# convolved = sepfir2d(data, H_r, H_c)

from scipy import ndimage # for convolution

# img_soft=ndimage.convolve(img_spine,kernel, mode='constant')
img_soft=ndimage.convolve(img_spine,kernel)
plt.imshow(img_soft, cmap="gray")

kernel=np.array([[0, -1, 0],[-1, 5, -1],[0, -1, 0]])
img_edg=ndimage.convolve(img_spine,kernel)
plt.imshow(img_edg, cmap="gray")

img_letter=io.imread("/content/drive/MyDrive/Images/letter.tif")

kernel=np.ones([35,35])/(35*35)
kernel=np.ones([5,5])/(5*5)
kernel=np.ones([50,50])/(50*50)
kernel

img_soft=ndimage.convolve(img_letter,kernel)
plt.imshow(img_soft, cmap="gray")

img_sp=io.imread("/content/drive/MyDrive/Images/noisy.tif")

img_denoise=filters.median(img_sp)
plt.imshow(img_denoise, cmap="gray")

img_denoise=filters.butterworth(img_sp,high_pass=False, cutoff_frequency_ratio=0.1)
kernel_soft=np.ones([3,3])/9
img_denoise=ndimage.convolve(img_sp,kernel)
plt.imshow(img_denoise, cmap="gray")

